// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// *********************
// Site
// *********************
model Site {
  id               Int              @id @default(0)
  term             Term?
  privacy          Privacy?
  refund           Refund?
  about            About?
  socialLink       SocialLink?
  cities           City[]
  vendorCategories VendorCategory[]
  checklists       Checklist[]
  contactInfo      ContactInfo?
  map              Map?
}

model ContactInfo {
  id        Int      @id @default(autoincrement())
  email     String
  location  String
  phone     String
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId    Int      @unique @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Map {
  id     Int    @id @default(autoincrement())
  url    String
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId Int    @unique @default(0)
}

model City {
  id     Int    @id @default(autoincrement())
  name   String
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId Int    @default(0)
}

model VendorCategory {
  id     Int    @id @default(autoincrement())
  name   String @unique
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId Int    @default(0)
}

model Checklist {
  id     Int    @id @default(autoincrement())
  name   String
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId Int    @default(0)
}

model SocialLink {
  id        Int      @id @default(autoincrement())
  Facebook  String?
  Twitter   String?
  Pinterest String?
  Instagram String?
  Youtube   String?
  Linkedin  String?
  TikTok    String?
  Reddit    String?
  Discord   String?
  WhatsApp  String?
  Telegram  String?
  Quora     String?
  Tumblr    String?
  Threads   String?
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId    Int      @unique @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Menu {
  id       String @id @default(cuid())
  title    String @unique
  href     String
  subMenus Json?
}

model Term {
  id        Int        @id @default(autoincrement())
  title     String
  content   String
  site      Site       @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId    Int        @unique @default(0)
  status    PostStatus @default(Published)
  version   Int        @default(1)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
}

model Privacy {
  id        Int        @id @default(autoincrement())
  title     String
  content   String
  site      Site       @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId    Int        @unique @default(0)
  status    PostStatus @default(Published)
  version   Int        @default(1)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
}

model Refund {
  id        Int        @id @default(autoincrement())
  title     String
  content   String
  site      Site       @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId    Int        @unique @default(1)
  status    PostStatus @default(Published)
  version   Int        @default(1)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
}

model About {
  id          Int      @id @default(autoincrement())
  name        String
  tagLine     String
  email       String
  phone       String
  content     String?
  seoTitle    String
  seoKeyWords String[]
  description String
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId      Int      @unique @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

// *********************
// Auth
// *********************

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  provider          AuthProvider[]      @default([Email])
  name              String
  role              Role                @default(User)
  phone             String?
  password          String
  brand             String?
  city              String?
  vendorType        String?
  verified          Boolean             @default(false)
  sessions          Session[]
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  posts             Post[]
  comments          Comment[]
  Message           Message[]
  ChatUser          ChatUser[]
  favConversations  FavConversation[]
  Event             Event[]
  Vendor            Vendor[]
  VendorProfileInfo VendorProfileInfo[]
  isApproved        Boolean             @default(false)
  Banquet           Banquet[]
  ProjectAlbum      ProjectAlbum[]
  ProjectPhoto      ProjectPhoto[]
  ProjectVideo      ProjectVideo[]
  MenuFiles         FoodMenu[]
  FoodMenuImage     FoodMenuImage[]
  reviews           Review[]            @relation(name: "UserReviews")
  vendorReviews     Review[]            @relation(name: "VendorReviews")
  faqs              Faq[]
  Package           Package[]
  payments          Payment[]           @relation(name: "UserPayments")
  vendorPayments    Payment[]           @relation(name: "VendorPayments")
  approval          Approval[]
}

enum Role {
  User
  Vendor
  Admin
  Super
}

enum AuthProvider {
  Email
}

model Session {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  valid     Boolean  @default(true)
  userAgent String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

// *********************
// Blog Post
// *********************

model Category {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  posts     Post[]
  parent    Category?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String?
  children  Category[] @relation("ParentChild")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
}

model Post {
  id            String     @id @default(cuid())
  title         String
  slug          String     @unique
  description   String
  content       String
  thumbnail     String?
  keywords      String[]
  tags          String[]
  status        PostStatus @default(Published)
  isFeatured    Boolean    @default(false)
  allowComments Boolean    @default(false)
  user          User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId        String?
  category      Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    String
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  comments      Comment[]
}

enum PostStatus {
  Published
  Draft
}

model Comment {
  id        String    @id @default(cuid())
  text      String?
  edited    Boolean   @default(false)
  parentId  String?
  postId    String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("ParentChild")

  @@index([postId, userId])
}

model Contact {
  id        String          @id @default(cuid())
  name      String
  subject   String
  email     String
  message   String
  type      ContactUserType @default(Public)
  status    ContactStatus   @default(Pending)
  userId    String?
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")
}

enum ContactUserType {
  User
  Vendor
  Public
}

enum ContactStatus {
  Pending
  Resolved
}

// *********************
// Questions
// *********************
model Questions {
  id           String       @id @default(cuid())
  question     String
  questionType QuestionType
  vendorType   String
  inputType    InputType    @default(Text_Number)
  labelName    String?
  showLabel    ShowLabel    @default(true)
  others       Json?
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
}

enum QuestionType {
  Short
  Long
  Multiple_Choice
  Radio
}

enum InputType {
  Text_Number
  File
  Number
}

enum ShowLabel {
  true
  false
}

// *********************
// Plan
// *********************
model SubsPlan {
  id        String     @id @default(cuid())
  type      PlanType   @default(Yearly)
  price     String
  tax       String     @default("0")
  name      String
  features  Json[]
  status    PlanStatus @default(Active)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
}

enum PlanType {
  Monthly
  Yearly
}

enum PlanStatus {
  Active
  Inactive
}

// *********************
// Chat
// *********************

model Message {
  id             String        @id @default(cuid())
  text           String
  conversationId String
  seen           Boolean       @default(false)
  status         MessageStatus @default(SENT)
  createdAt      DateTime      @default(now()) @map("created_at")
  senderId       String
  sender         User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  updatedAt      DateTime      @updatedAt @map("updated_at")
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model ChatUser {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id               String            @id @default(cuid())
  key              String            @unique
  deleted          Boolean           @default(false)
  authorId         String?
  readByAuthor     Boolean           @default(true)
  readByReceiver   Boolean           @default(false)
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  users            ChatUser[]
  messages         Message[]
  favConversations FavConversation[]
}

model FavConversation {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now()) @map("created_at")
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

// *********************
// Setup-Wedding
// *********************

model Event {
  id        String    @id @default(cuid())
  type      EventType @default(Groom)
  title     String
  location  String
  date      String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
}

enum EventType {
  Groom
  Bride
}

// *********************
// Vendor-Profile
// *********************

model Vendor {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model VendorProfileInfo {
  id                String   @id @default(cuid())
  loginEmail        String?
  brandName         String?
  categoryName      String?
  contactPersonName String?
  additionalMail    String?
  contactNumber     Json?
  website           String?
  facebook          String?
  instagram         String?
  youtube           String?
  addInfo           String?
  city              String?
  address           String?
  additionalData    Json?
  User              User?    @relation(fields: [userId], references: [id])
  userId            String?  @unique
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
}

model Package {
  id           String   @id @default(cuid())
  packageName  String
  packagePrice String
  services     Json[]
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
}

model Faq {
  id        String   @id @default(cuid())
  question  String
  answer    String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Step {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Banquet {
  id            String   @id @default(cuid())
  title         String
  type          String
  fixedCapacity String
  floatCapacity String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
}

model ProjectPhoto {
  id         String   @id @default(cuid())
  photo      String
  isFeatured Boolean  @default(false) @map("is_featured")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model ProjectAlbum {
  id        String   @id @default(cuid())
  name      String
  photos    Json[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model ProjectVideo {
  id        String   @id @default(cuid())
  video     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model FoodMenu {
  id          String       @id @default(cuid())
  title       String
  menuType    FoodMenuType
  price       String
  starter     String
  mainCourse  String
  soupOrSalad String
  dessert     String
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?
}

enum FoodMenuType {
  Standard
  Premium
  Luxury
}

model FoodMenuImage {
  id        String   @id @default(cuid())
  image     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

//Reviews
model Review {
  id               String   @id @default(cuid())
  isShare          Boolean  @default(false)
  rating           Float
  feedback         String
  feedBackQuestion String
  photos           String[]
  reply            String?
  userId           String
  user             User     @relation(name: "UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  vendorId         String
  vendor           User     @relation(name: "VendorReviews", fields: [vendorId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
}

model Payment {
  id             String        @id @default(cuid())
  amount         String
  currency       String
  quantity       String
  packageName    String
  status         PaymentStatus @default(Pending)
  customerNumber String
  customerEmail  String
  customerName   String
  userId         String
  user           User          @relation(name: "UserPayments", fields: [userId], references: [id], onDelete: Cascade)
  vendorId       String
  vendor         User          @relation(name: "VendorPayments", fields: [vendorId], references: [id], onDelete: Cascade)
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
}

enum PaymentStatus {
  Pending
  Success
  Failed
}

// *********************
// Approval
// *********************
model Approval {
  id        String         @id @default(cuid())
  status    ApprovalStatus @default(Pending)
  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
}

enum ApprovalStatus {
  Pending
  Approved
  Rejected
}
